{"name":"system-server-admin","master":false,"subsystem":false,"version":"1.0.0","description":"System admin server","schemas":{"104ad1f48518376":{"_id":"104ad1f48518376","_name":"RuntimeChannel","_inherit":["RuntimeComponent"],"_core":true,"sync":"method"},"11b2519e7a11915":{"_id":"11b2519e7a11915","_name":"ServerAdmin","_inherit":["RuntimeComponent"],"start":"method","_core":true}},"behaviors":{"1c8121cf7910910":{"_id":"1c8121cf7910910","component":"12a3b15f21144c3","state":"main","action":"function main() { \n    var ServerAdmin = this.require('ServerAdmin'),\n        serverAdmin = new ServerAdmin({\n            '_core': true\n        });\n    \n    serverAdmin.start();\n}","useCoreAPI":false,"core":true},"1086b19ad51b198":{"_id":"1086b19ad51b198","component":"RuntimeChannel","state":"sync","action":"function sync(req) {\n    req.end(this.require('db').system());\n}","useCoreAPI":false,"core":true},"13413104e01f8fb":{"_id":"13413104e01f8fb","component":"ServerAdmin","state":"start","action":"function start() {\n    var RuntimeChannel = null,\n        runtimeChannel = null,\n        require = global._require;\n        http = require('http'),\n        qs = require('querystring'),\n        self = this;\n\n    // Create server\n    http.createServer(function (req, res) {\n        var message = null;\n\n        // POST\n        if (req.method == 'POST') {\n            var body = '';\n            req.on('data', function (data) {\n                body = body + data;\n                if (body.length > 1e6) {\n                    req.connection.destroy();\n                }\n            });\n            req.on('end', function () {\n                var post = qs.parse(body),\n                    message = {};\n\n                function _postToMessage(url, post) {\n                    var message = {\n                        'from': '',\n                        'event': '',\n                        'data': []\n                    },\n                        event = '',\n                        data = [],\n                        params = [],\n                        i = 0,\n                        length = 0;\n\n                    params = url.replace('/', '').split('/');\n                    length = params.length;\n                    for (i = 0; i < length; i++) {\n                        if (i === 0) {\n                            event = params[0];\n                        }\n                    }\n\n                    \n\n                    message.event = event;\n                    message.data = JSON.parse(decodeURI(Object.keys(post)[0]));\n                \n                    return message;\n                }\n\n                message = _postToMessage(req.url, post);\n\n                $db.RuntimeMessage.insert(message);\n            });\n        }\n\n        // GET\n        if (req.method == 'GET') {\n            function _getToMessage(url, res) {\n                var message = {\n                    'from': '',\n                    'event': '',\n                    'data': []\n                },\n                    event = '',\n                    data = [],\n                    params = [],\n                    i = 0,\n                    length = 0;\n\n                if (url.indexOf('favicon.ico') !== -1) {\n                    message = null;\n                } else {\n                    params = url.replace('/', '').split('/');\n                    length = params.length;\n                    for (i = 0; i < length; i++) {\n                        if (i === 0) {\n                            event = params[0];\n                        } else {\n                            data.push(params[i]);\n                        }\n                    }\n                    data.push(res);\n\n                    message.event = event;\n                    message.data = data;\n\n                    if (event === '') {\n                        message = null;\n                    }\n                }\n                return message;\n            }\n\n            res.writeHead(200, { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' });\n            message = _getToMessage(req.url, res);\n\n            if (message) {\n                $db.RuntimeMessage.insert(message);\n            } else {\n                res.end('');\n            }\n        }\n    }).listen(8888, \"127.0.0.1\");\n    \n    console.log('System Runtime Admin is started on http://localhost:8888');\n    \n    RuntimeChannel = this.require('RuntimeChannel');\n    runtimeChannel = new RuntimeChannel({\n        '_id': 'channel-admin',\n        '_core': true\n    });\n        \n    // schema change events\n    runtimeChannel.on('createSchema', function createSchema(id, schema) {\n        this.require('metamodel').schema(schema);\n        this.require('metamodel').create();\n    }, false, true);\n    \n    runtimeChannel.on('updateSchema', function updateSchema(id, schema) {\n         this.require('metamodel').schema(schema);\n         this.require('metamodel').create();\n    }, false, true);\n        \n    runtimeChannel.on('deleteSchema', function deleteSchema(id) {\n        var search = $db.RuntimeSchema.find({ '_id': id }),\n            modelName = '',\n            modelId = '';\n\n        if (search.length) {\n            modelName = search[0]._name;\n            $db.RuntimeSchema.remove({ '_id': id });\n\n            search = $db.RuntimeModel.find({ '_name': modelName });\n            if (search.length) {\n                modelId = search[0]._id;\n                $db.RuntimeModel.remove({ '_id': modelId });\n                $component.removeFromMemory(modelName);\n            }\n\n            search = $db.RuntimeGeneratedModel.find({ '_name': modelName });\n            if (search.length) {\n                modelId = search[0]._id;\n                $db.RuntimeGeneratedModel.remove({ '_id': modelId });\n                $component.removeFromMemory(modelName);\n            }\n            this.require('metamodel').create();\n        }\n    }, true, true);\n        \n    // model change events\n    runtimeChannel.on('createModel', function createModel(id, model) {\n        this.require('metamodel').model(model);\n        this.require('metamodel').create();\n    }, false, true);\n    \n    runtimeChannel.on('updateModel', function updateModel(id, model) {\n         this.require('metamodel').model(model);\n         this.require('metamodel').create();\n    }, false, true);\n        \n    runtimeChannel.on('deleteModel', function deleteModel(id) {\n        var search = $db.RuntimeModel.find({ '_id': id }),\n            modelName = '',\n            modelId = '';\n\n        if (search.length) {\n            modelName = search[0]._name;\n            $db.RuntimeModel.remove({ '_id': id });\n            $component.removeFromMemory(modelName);\n        }\n\n        search = $db.RuntimeGeneratedModel.find({ '_name': modelName });\n        if (search.length) {\n            modelId = search[0]._id;\n            $db.RuntimeGeneratedModel.remove({ '_id': modelId });\n            $component.removeFromMemory(modelName);\n        }\n        this.require('metamodel').create();\n    }, true, true);\n        \n    // type change events\n    runtimeChannel.on('createType', function createType(id, type) {\n        this.require('metamodel').type(type);\n        this.require('metamodel').create();\n    }, false, true);\n    \n    runtimeChannel.on('updateType', function updateType(id, type) {\n         this.require('metamodel').type(type);\n         this.require('metamodel').create();\n    }, false, true);\n    \n    runtimeChannel.on('deleteType', function deleteType(id) {\n        $db.RuntimeType.remove({ 'name': id });\n        this.require('metamodel').create();\n    }, true, true);\n        \n    // component change events\n    runtimeChannel.on('createComponent', function createComponent(model, component) {\n        $db[model].insert(component);\n    }, true, true);\n    \n    runtimeChannel.on('updateComponent', function updateComponent(id, collection, component) {\n        $db[collection].update({'_id': id}, component, {'upsert': true});\n    }, true, true);\n    \n    runtimeChannel.on('deleteComponent', function deleteComponent(id, collection) {\n        $db[collection].remove({'_id': id});\n    }, true, true);\n        \n    // behavior change events\n    runtimeChannel.on('createBehavior', function createBehavior(component) {\n        $db.RuntimeBehavior.insert(component);\n    }, true, true);\n    \n    runtimeChannel.on('updateBehavior', function updateBehavior(id, behavior) {\n        this.require(id).action(behavior.action);\n        if (behavior.state === 'main') {\n            this.require(behavior.component).main();   \n        }\n    }, false, true);\n    \n    runtimeChannel.on('deleteBehavior', function deleteBehavior(id) {\n        $db.RuntimeBehavior.remove({'_id': id});                  \n    }, true, true);\n}","useCoreAPI":true,"core":true}},"types":{},"components":{},"_id":"12a3b15f21144c3","models":{"14c7c105b31a160":{"_id":"14c7c105b31a160","_name":"RuntimeChannel","_core":true,"sync":{"params":[{"name":"req","type":"object"}]}},"174e31621213202":{"_id":"174e31621213202","_name":"ServerAdmin","start":{},"_core":true}}}